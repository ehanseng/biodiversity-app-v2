// Servicio simple de storage espec√≠fico por usuario
class SimpleTreeStorage {
  
  // Obtener clave de storage espec√≠fica por usuario
  static getUserStorageKey() {
    try {
      const authData = localStorage.getItem('biodiversity_user');
      if (authData) {
        const auth = JSON.parse(authData);
        const userId = auth.id || auth.email || 'default';
        return `@biodiversity_trees_${userId}`;
      }
    } catch (error) {
      console.error('Error obteniendo usuario:', error);
    }
    return '@biodiversity_trees_default';
  }
  
  // Obtener √°rboles locales del usuario actual
  static getLocalTrees() {
    try {
      const storageKey = this.getUserStorageKey();
      const treesJson = localStorage.getItem(storageKey);
      const trees = treesJson ? JSON.parse(treesJson) : [];
      console.log(`üìã [SimpleTreeStorage] √Årboles recuperados: ${trees.length}`);
      return trees;
    } catch (error) {
      console.error('‚ùå Error obteniendo √°rboles:', error);
      return [];
    }
  }
  
  // Guardar √°rboles del usuario actual
  static saveLocalTrees(trees) {
    try {
      const storageKey = this.getUserStorageKey();
      localStorage.setItem(storageKey, JSON.stringify(trees));
      console.log(`‚úÖ [SimpleTreeStorage] ${trees.length} √°rboles guardados`);
    } catch (error) {
      console.error('‚ùå Error guardando √°rboles:', error);
    }
  }
  
  // Limpiar datos del usuario actual
  static clearUserData() {
    try {
      const storageKey = this.getUserStorageKey();
      localStorage.removeItem(storageKey);
      console.log('üßπ [SimpleTreeStorage] Datos del usuario limpiados');
    } catch (error) {
      console.error('‚ùå Error limpiando datos:', error);
    }
  }
}

export default SimpleTreeStorage;
